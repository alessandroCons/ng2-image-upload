{"version":3,"file":"angular2-image-upload.js.map","sources":["ng://angular2-image-upload/lib/file-drop.directive.ts","ng://angular2-image-upload/lib/image-upload.service.ts","ng://angular2-image-upload/lib/file-holder.ts","ng://angular2-image-upload/lib/image-upload/image-upload.component.ts","ng://angular2-image-upload/lib/image-upload.module.ts"],"sourcesContent":["import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[fileDrop]'\r\n})\r\nexport class FileDropDirective {\r\n  @Input() accept: string[];\r\n  @Output() fileOver: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @Output() fileDrop: EventEmitter<FileList> = new EventEmitter<FileList>();\r\n\r\n  private static getDataTransfer(event: any): DataTransfer {\r\n    return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer;\r\n  }\r\n\r\n  private static hasFiles(types: any): boolean {\r\n    if (!types) {\r\n      return false;\r\n    }\r\n\r\n    if (types.indexOf) {\r\n      return types.indexOf('Files') !== -1;\r\n    }\r\n\r\n    if (types.contains) {\r\n      return types.contains('Files');\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private static matchRule(rule: string, candidate: string) {\r\n    return new RegExp('^' + rule.split('*').join('.*') + '$').test(candidate);\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: any) {\r\n    const dataTransfer = FileDropDirective.getDataTransfer(event);\r\n\r\n    if (!FileDropDirective.hasFiles(dataTransfer.types)) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n\r\n    const files = this.filterFiles(dataTransfer.files);\r\n\r\n    event.preventDefault();\r\n    this.fileOver.emit(false);\r\n    this.fileDrop.emit(files);\r\n  }\r\n\r\n  @HostListener('dragleave', ['$event'])\r\n  onDragLeave(event) {\r\n    this.fileOver.emit(false);\r\n  }\r\n\r\n  @HostListener('dragover', ['$event'])\r\n  onDragOver(event: any) {\r\n    const dataTransfer = FileDropDirective.getDataTransfer(event);\r\n\r\n    if (!FileDropDirective.hasFiles(dataTransfer.types)) {\r\n      return;\r\n    }\r\n\r\n    dataTransfer.dropEffect = 'copy';\r\n    event.preventDefault();\r\n    this.fileOver.emit(true);\r\n  }\r\n\r\n  private filterFiles(files: FileList): any {\r\n    if (!this.accept || this.accept.length === 0) {\r\n      return files;\r\n    }\r\n\r\n    const acceptedFiles: File[] = [];\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n      for (let j = 0; j < this.accept.length; j++) {\r\n        if (FileDropDirective.matchRule(this.accept[j], files[i].type)) {\r\n          acceptedFiles.push(files[i]);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return acceptedFiles;\r\n  }\r\n}\r\n","import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class ImageUploadService {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  public uploadImage(url: string,\r\n                     image: File,\r\n                     headers?: HttpHeaders | { [name: string]: string | string[] },\r\n                     partName: string = 'image',\r\n                     customFormData?: { [header: string]: string | Blob },\r\n                     withCredentials?: boolean): Observable<HttpResponse<any>> {\r\n    if (!url || url === '') {\r\n      throw new Error('Url is not set! Please set it before doing queries');\r\n    }\r\n\r\n    const formData = new FormData();\r\n\r\n    if (customFormData) {\r\n      for (const key of Object.keys(customFormData)) {\r\n        formData.append(key, customFormData[key]);\r\n      }\r\n    }\r\n\r\n    formData.append(partName, image);\r\n\r\n    return this.http.post(url, formData, { withCredentials, headers, observe: 'response' });\r\n  }\r\n}\r\n","import { HttpResponse } from '@angular/common/http';\r\n\r\nexport class FileHolder {\r\n  public pending = false;\r\n  public serverResponse: { status: number, response: HttpResponse<any> };\r\n\r\n  constructor(public src: string, public file: File) {\r\n  }\r\n}\r\n","import { HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { Component, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FileHolder } from '../file-holder';\r\nimport { ImageUploadService } from '../image-upload.service';\r\nimport { Style } from '../style';\r\nimport { UploadMetadata } from '../upload-metadata';\r\n\r\n@Component({\r\n  selector: 'image-upload',\r\n  templateUrl: './image-upload.component.html',\r\n  styleUrls: ['./image-upload.component.css']\r\n})\r\nexport class ImageUploadComponent implements OnInit, OnChanges {\r\n  files: FileHolder[] = [];\r\n  fileCounter = 0;\r\n  fileOver = false;\r\n  showFileTooLargeMessage = false;\r\n\r\n  @Input() beforeUpload: (metadata: UploadMetadata) => UploadMetadata | Promise<UploadMetadata> = metadata => metadata;\r\n  @Input() buttonCaption = 'Select Images';\r\n  @Input() disabled = false;\r\n  @Input('class') cssClass = 'img-ul';\r\n  @Input() clearButtonCaption = 'Clear';\r\n  @Input() dropBoxMessage = 'Drop your images here!';\r\n  @Input() fileTooLargeMessage: string;\r\n  @Input() headers: HttpHeaders | { [name: string]: string | string[] };\r\n  @Input() max = 100;\r\n  @Input() maxFileSize: number;\r\n  @Input() preview = true;\r\n  @Input() partName: string;\r\n  @Input() style: Style;\r\n  @Input('extensions') supportedExtensions: string[];\r\n  @Input() url: string;\r\n  @Input() withCredentials = false;\r\n  @Input() uploadedFiles: string[] | Array<{ url: string, fileName: string, blob?: Blob }> = [];\r\n  @Output() removed = new EventEmitter<FileHolder>();\r\n  @Output() uploadStateChanged = new EventEmitter<boolean>();\r\n  @Output() uploadFinished = new EventEmitter<FileHolder>();\r\n  @Output() previewClicked = new EventEmitter<FileHolder>();\r\n\r\n  @ViewChild('input')\r\n  private inputElement: ElementRef;\r\n  private pendingFilesCounter = 0;\r\n\r\n  constructor(private imageService: ImageUploadService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!this.fileTooLargeMessage) {\r\n      this.fileTooLargeMessage = 'An image was too large and was not uploaded.' + (this.maxFileSize ? (' The maximum file size is ' + this.maxFileSize / 1024) + 'KiB.' : '');\r\n    }\r\n    this.supportedExtensions = this.supportedExtensions ? this.supportedExtensions.map((ext) => 'image/' + ext) : ['image/*'];\r\n  }\r\n\r\n  deleteAll() {\r\n    this.files.forEach(f => this.removed.emit(f));\r\n    this.files = [];\r\n    this.fileCounter = 0;\r\n    if (this.inputElement) {\r\n      this.inputElement.nativeElement.value = '';\r\n    }\r\n  }\r\n\r\n  deleteFile(file: FileHolder): void {\r\n    const index = this.files.indexOf(file);\r\n    this.files.splice(index, 1);\r\n    this.fileCounter--;\r\n    if (this.inputElement) {\r\n      this.inputElement.nativeElement.value = '';\r\n    }\r\n    this.removed.emit(file);\r\n  }\r\n\r\n  previewFileClicked(file: FileHolder) {\r\n    this.previewClicked.emit(file);\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.uploadedFiles && changes.uploadedFiles.currentValue.length > 0) {\r\n      this.processUploadedFiles();\r\n    }\r\n  }\r\n\r\n  onFileChange(files: FileList) {\r\n    if (this.disabled) return;\r\n\r\n    const remainingSlots = this.max - this.fileCounter;\r\n    const filesToUploadNum = files.length > remainingSlots ? remainingSlots : files.length;\r\n\r\n    if (this.url && filesToUploadNum !== 0) {\r\n      this.uploadStateChanged.emit(true);\r\n    }\r\n\r\n    this.fileCounter += filesToUploadNum;\r\n    this.showFileTooLargeMessage = false;\r\n    this.uploadFiles(files, filesToUploadNum);\r\n  }\r\n\r\n  onFileOver = (isOver) => this.fileOver = isOver;\r\n\r\n  private onResponse(response: HttpResponse<any>, fileHolder: FileHolder) {\r\n    fileHolder.serverResponse = { status: response.status, response };\r\n    fileHolder.pending = false;\r\n\r\n    this.uploadFinished.emit(fileHolder);\r\n\r\n    if (--this.pendingFilesCounter === 0) {\r\n      this.uploadStateChanged.emit(false);\r\n    }\r\n  }\r\n\r\n  private processUploadedFiles() {\r\n    for (let i = 0; i < this.uploadedFiles.length; i++) {\r\n      const data: any = this.uploadedFiles[i];\r\n\r\n      let fileBlob: Blob,\r\n        file: File,\r\n        fileUrl: string;\r\n\r\n      if (data instanceof Object) {\r\n        fileUrl = data.url;\r\n        fileBlob = (data.blob) ? data.blob : new Blob([data]);\r\n        file = new File([fileBlob], data.fileName);\r\n      } else {\r\n        fileUrl = data;\r\n        fileBlob = new Blob([fileUrl]);\r\n        file = new File([fileBlob], fileUrl);\r\n      }\r\n\r\n      this.files.push(new FileHolder(fileUrl, file));\r\n    }\r\n  }\r\n\r\n  private async uploadFiles(files: FileList, filesToUploadNum: number) {\r\n    for (let i = 0; i < filesToUploadNum; i++) {\r\n      const file = files[i];\r\n\r\n      if (this.maxFileSize && file.size > this.maxFileSize) {\r\n        this.fileCounter--;\r\n        this.inputElement.nativeElement.value = '';\r\n        this.showFileTooLargeMessage = true;\r\n        this.uploadStateChanged.emit(false);\r\n        continue;\r\n      }\r\n\r\n      const beforeUploadResult: UploadMetadata = await this.beforeUpload({ file, url: this.url, abort: false });\r\n\r\n      if (beforeUploadResult.abort) {\r\n        this.fileCounter--;\r\n        this.inputElement.nativeElement.value = '';\r\n        continue;\r\n      }\r\n\r\n      const img = document.createElement('img') as HTMLImageElement;\r\n      img.src = window.URL.createObjectURL(beforeUploadResult.file);\r\n\r\n      const reader = new FileReader();\r\n      reader.addEventListener('load', (event: any) => {\r\n        const fileHolder: FileHolder = new FileHolder(event.target.result, beforeUploadResult.file);\r\n        this.files.push(fileHolder);\r\n        this.uploadSingleFile(fileHolder, beforeUploadResult.url, beforeUploadResult.formData);\r\n      }, false);\r\n      reader.readAsDataURL(beforeUploadResult.file);\r\n    }\r\n  }\r\n\r\n  private uploadSingleFile(fileHolder: FileHolder, url = this.url, customForm?: { [name: string]: any }) {\r\n    if (url) {\r\n      this.pendingFilesCounter++;\r\n      fileHolder.pending = true;\r\n\r\n      this.imageService\r\n        .uploadImage(url, fileHolder.file, this.headers, this.partName, customForm, this.withCredentials)\r\n        .subscribe(\r\n          response => this.onResponse(response, fileHolder),\r\n          error => {\r\n            this.onResponse(error, fileHolder);\r\n            this.deleteFile(fileHolder);\r\n          });\r\n    } else {\r\n      this.uploadFinished.emit(fileHolder);\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { FileDropDirective } from './file-drop.directive';\r\nimport { ImageUploadService } from './image-upload.service';\r\nimport { ImageUploadComponent } from './image-upload/image-upload.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [\r\n    ImageUploadComponent,\r\n    FileDropDirective\r\n  ],\r\n  exports: [ImageUploadComponent]\r\n})\r\nexport class ImageUploadModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: ImageUploadModule,\r\n      providers: [ImageUploadService]\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}
